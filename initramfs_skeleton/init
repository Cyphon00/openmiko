#!/bin/sh
# devtmpfs does not get automounted for initramfs
/bin/mount -t devtmpfs devtmpfs /dev
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console

echo "Starting full root buildout"

mount -t proc proc /proc
mount -t sysfs sysfs /sys

echo "Mounted core filesystems"

mkdir -p /jffsroot
mount -t jffs2 /dev/mtdblock2 /jffsroot

/bin/busybox --install /bin

echo "Mounted jffsroot"

# There really should only be one file in the jffsroot: rootfs.tar.xz
# In some cases there will be other stuff leftover because the flash
# doesn't totally erase everything. This causes an error:
# tar: invalid tar magic
# To fix this remove all the other files which will clean up the jffs
# filesystem
find /jffsroot ! -name 'rootfs.tar.xz' -type f -exec rm -f {} +

mkdir -p /newroot

# Setup zram root file system. Use 4K blocks because zram
# does not include any option to control block size. It is hard-coded.

echo 48M > /sys/block/zram0/disksize
busybox mke2fs /dev/zram0 -b 4096
mount /dev/zram0 /newroot

#mount -t tmpfs newroot /newroot
tar -xvf /jffsroot/rootfs.tar.xz -C /newroot

if [ $? != 0 ]
then
  echo "Extracting root filesystem failed."
  exec /bin/sh
  exit 1
fi

umount /jffsroot

rm -rf /newroot/dev
rm -rf /newroot/sys

mkdir /newroot/dev
mkdir /newroot/sys

mount --move /dev /newroot/dev
mount --move /sys /newroot/sys
mount --move /proc /newroot/proc


#/bin/busybox --install -s
# ls -i /

echo "Switching root to /newroot"
# switch_root moves already mounted /proc, /dev, /sys and /run to newroot
exec busybox switch_root /newroot /sbin/init


# /sbin/init can only be started as PID 1 but we are already PID 1
# The solution is to execute `exec /sbin/init` while we are still inside
# Will inherit the PID (PID 1)

#echo "Starting /sbin/init"
#exec /sbin/init $*
