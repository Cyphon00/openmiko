#!/bin/sh
# devtmpfs does not get automounted for initramfs
/bin/mount -t devtmpfs devtmpfs /dev

# Setup this program to get input from /dev/console, and output to /dev/console
# file descriptor #0: standard input stream, or stdin for short.
# file descriptor #1: standard output stream, or stdout for short.
# file descriptor #2: standard error output stream, or stderr for short.
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console


read -n 1 -s -r -t 2 -p "Press any key to interrupt init" 

if [ $? -eq 0 ]
then
  echo "Dropping to a shell"
  exec /bin/sh
fi


echo "Starting full root buildout"

mount -t proc proc /proc
mount -t sysfs sysfs /sys

echo "Mounted core filesystems"

mkdir -p /jffsroot
mount -t jffs2 /dev/mtdblock2 /jffsroot

/bin/busybox --install /bin




setup_sdcard_access() {
	mkdir -p /sdcard
	mount -t vfat /dev/mmcblk0p1 /sdcard -o rw,umask=0000,dmask=0000
	sleep 1
	echo "Mount /sdcard successful"
}

# Determine if sdcard access needs to be setup
# On WyzeCam Pan units the /dev/mmcblk0p1 is available without having
# to export pin 43. However on WyzeCams you need to export 43
# for the mmc devices to show up

if [ -e /dev/mmcblk0p1 ]; then
	setup_sdcard_access
else
	# If the device doesn't exist then either the sdcard is not present or we need to export the pin
	echo 43 > /sys/class/gpio/export
	echo out > /sys/class/gpio/gpio43/direction
	sleep 3

	# If after exporting the device exists then setup
	if [ -e /dev/mmcblk0p1 ]; then
		setup_sdcard_access
	else
		# If it still doesn't exist then unexport and continue
		echo 43 > /sys/class/gpio/unexport 
	fi;
fi;

# About the earliest we can read configuration parameters
OPENMIKO_CONFIG_FILE=/sdcard/config/overlay/etc/openmiko.conf
if [[ -f $OPENMIKO_CONFIG_FILE ]]; then
	. $OPENMIKO_CONFIG_FILE
fi

if [ "$ENABLE_DEBUG" -eq "1" ]; then
	echo "Enabling kernel initramfs debug log to sdcard"
	LOG_FILE="/sdcard/initramfs_output.log"
	rm -f $LOG_FILE && touch $LOG_FILE

	mknod /root/stdout_and_stderr.pipe p
	cat /root/stdout_and_stderr.pipe | tee $LOG_FILE &
	exec 1>/root/stdout_and_stderr.pipe
	exec 2>/root/stdout_and_stderr.pipe
fi

echo "Mounted jffsroot"

# There really should only be one file in the jffsroot: rootfs.tar.xz
# In some cases there will be other stuff leftover because the flash
# doesn't totally erase everything. This causes an error:
# tar: invalid tar magic
# To fix this remove all the other files which will clean up the jffs
# filesystem
find /jffsroot ! -name 'rootfs.tar.xz' -type f -exec rm -f {} +

mkdir -p /newroot

# Setup zram root file system. Use 4K blocks because zram
# does not include any option to control block size. It is hard-coded.

echo 48M > /sys/block/zram0/disksize
busybox mke2fs /dev/zram0 -b 4096
mount /dev/zram0 /newroot

#mount -t tmpfs newroot /newroot
tar -xvf /jffsroot/rootfs.tar.xz -C /newroot

if [ $? != 0 ]
then
  echo "Extracting root filesystem failed."
  exec /bin/sh
  exit 1
fi

umount /jffsroot

rm -rf /newroot/dev
rm -rf /newroot/sys

mkdir /newroot/dev
mkdir /newroot/sys

mount --move /dev /newroot/dev
mount --move /sys /newroot/sys
mount --move /proc /newroot/proc


#/bin/busybox --install -s
# ls -i /

echo "Switching root to /newroot"

# Switch back to normal logging
exec 1>/dev/console
exec 2>/dev/console

# switch_root moves already mounted /proc, /dev, /sys and /run to newroot
exec busybox switch_root /newroot /sbin/init


# /sbin/init can only be started as PID 1 but we are already PID 1
# The solution is to execute `exec /sbin/init` while we are still inside
# Will inherit the PID (PID 1)

#echo "Starting /sbin/init"
#exec /sbin/init $*
